package rothschild.henning.jacob.noriginmedia.controller;

import android.os.Bundle;
import android.support.design.widget.TabLayout;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.util.Log;
import android.view.Menu;

import rothschild.henning.jacob.noriginmedia.R;
import rothschild.henning.jacob.noriginmedia.view.DynamicViewPager;

/**
 * Auto-generated by Android Studio.
 *
 * The head-controller of everything. Pulls the tabs, content and menus together.
 */
public class MainActivity extends AppCompatActivity {
	
	/**
	 * The {@link android.support.v4.view.PagerAdapter} that will provide
	 * fragments for each of the sections. We use a
	 * {@link FragmentPagerAdapter} derivative, which will keep every
	 * loaded fragment in memory. If this becomes too memory intensive, it
	 * may be best to switch to a
	 * {@link android.support.v4.app.FragmentStatePagerAdapter}.
	 */
	private SectionsPagerAdapter mSectionsPagerAdapter;
	
	/**
	 * The {@link ViewPager} that will host the section contents.
	 */
	private DynamicViewPager mViewPager;
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
		setSupportActionBar(toolbar);
		// Create the adapter that will return a fragment for each of the three
		// primary sections of the activity.
		mSectionsPagerAdapter = new SectionsPagerAdapter(getSupportFragmentManager());
		
		// Set up the ViewPager with the sections adapter.
		mViewPager = (DynamicViewPager) findViewById(R.id.container);
		mViewPager.setAdapter(mSectionsPagerAdapter);
		makeViewPagerDynamic();
		
		TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);
		tabLayout.setupWithViewPager(mViewPager);
	}
	
	/** If touches are allowed in the tab with epg the ViewPager will overpower the epg, making it unscrollable. Otherwise, we enjoy the ViewPager-scroll. Thus, we must change the ability to scroll, based on which tab the user is currently in. */
	private void makeViewPagerDynamic() {
		mViewPager.addOnPageChangeListener(new ViewPager.OnPageChangeListener() {
			@Override
			public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {}
			@Override
			public void onPageScrollStateChanged(int state) {}
			
			@Override
			public void onPageSelected(int position) {
				Log.d("makeViewPagerDynamic", position + ", " + mSectionsPagerAdapter.isTouchesAllowed(position));
				if (mSectionsPagerAdapter.isTouchesAllowed(position)) {
					mViewPager.enableTouches();
				} else {
					mViewPager.disableTouches();
				}
			}
		});
	}
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.menu_main, menu);
		return true;
	}
}
